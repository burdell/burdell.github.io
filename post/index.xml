<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on nathan griffin</title>
    <link>http://nathaniscool.com/post/</link>
    <description>Recent content in Posts on nathan griffin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 25 Mar 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://nathaniscool.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Angular Routing Curveballs</title>
      <link>http://nathaniscool.com/post/routingcurveballs/</link>
      <pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nathaniscool.com/post/routingcurveballs/</guid>
      <description>

&lt;p&gt;I wrote recently about &lt;a href=&#34;http://nathaniscool.com/post/miniappbuilds&#34;&gt;structuring an Angular app as a series of smaller apps&lt;/a&gt;. One tricky part about this architecture is dealing with between-app routing when using &lt;a href=&#34;https://github.com/angular-ui/ui-router&#34;&gt;UI Router&lt;/a&gt;, which provides powerful state-based routing for Angular apps that allow for cool things like nested views and handling asyncronous data.&lt;/p&gt;

&lt;p&gt;There are 2 hurdles to jump:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Knowing the url for a state in another app&lt;/li&gt;
&lt;li&gt;Getting Angular to refresh the page for those urls&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;knowing-the-url:8210323ad8d8da9c9a4161ccd9c52ed2&#34;&gt;Knowing the URL&lt;/h2&gt;

&lt;p&gt;The number one goal in all this is to only have to define the actual urls for our states in one place.&lt;/p&gt;

&lt;p&gt;This means using a &lt;a href=&#34;https://docs.angularjs.org/guide/providers&#34;&gt;provider&lt;/a&gt; that holds the actual url snippets which is then used inside the config function when setting the app&amp;rsquo;s routes and also inside a routing service that can be injected anywhere in the app.&lt;/p&gt;

&lt;p&gt;The provider would look something like this:
&lt;pre class=&#34;prettyprint&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var routesProvider = function(){
    var routeData = {
        announcements: {
            announcements: &#39;/announcements/:nodeId&#39;,
            list: &#39;/list&#39;,
            detail: &#39;/:id&#39;,
            newtopic: &#39;/new&#39;,
            edit: &#39;/edit&#39;
        },
        inbox: {
            inbox: &#39;/inbox&#39;,
            detail: &#39;/message/:id&#39;,
            newtopic: &#39;/new&#39;
        }
    }

    this.routes = routeData;
    this.$get = function(){
        return this.routes;
    }
};


var providerName = &#39;AppRoutes&#39;;
angular.module(&#39;app.providers&#39;)
    .provider(providerName, routesProvider);
module.exports = providerName;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Setting the routes for the app:
&lt;pre class=&#34;prettyprint&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(&#39;shared/providers/routes&#39;);

var config = function($stateProvider, $locationProvider, routesProvider) {
    $locationProvider.html5Mode(true);

    var announcementsRoutes = routesProvider.routes.announcements;

    $stateProvider
        .state(&#39;announcements&#39;, {
            url: announcementsRoutes.announcements,
            abstract: true,
            templateUrl: &#39;announcements/announcements.html&#39;,
        })
        .state(&#39;announcements.newtopic&#39;, 
            url: announcementRoutes.newtopic,
            templateUrl: &#39;announcements/newtopic/announcements.newtopic.html&#39;
            controller: &#39;NewAnnouncement as vm&#39;
        )
        .state(&#39;announcements.list&#39;, {
            url: announcementsRoutes.list,
            templateUrl: &#39;announcements/list/announcements.list.html&#39;,
            controller: &#39;AnnouncementList as vm&#39;,
        })
        .state(&#39;announcements.edit&#39;, standardRoutes.newTopic({
            url: announcementsRoutes.edit,
            templateUrl: &#39;announcements/edit/announcements.edit.html&#39;
        }, true))
        .state(&#39;announcements.detail&#39;, {
            url: announcementsRoutes.detail, 
            templateUrl: &#39;announcements/detail/announcements.detail.html&#39;,
            controller: &#39;AnnouncementDetail as vm&#39;
        });
    };
    config.$inject = [&#39;$stateProvider&#39;, &#39;$locationProvider&#39;, &#39;AppRoutesProvider&#39;];

angular.module(&#39;community.announcements&#39;)
    .config(config);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;And the corresponding service and a simplified generateUrl function:
&lt;pre class=&#34;prettyprint&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var _ = require(&#39;underscore&#39;);

var routingService = function(appRoutes){
    return {
        generateUrl: function(route, routeData){
            if (!route) return &amp;quot;&amp;quot;;

            var routeSections = route.split(&#39;.&#39;);
            var areaName = routeSections[0];
            var appRoutes = appRoutes[areaName];

            var url = &amp;quot;&amp;quot;;           
            _.each(routeSections, function(section){
                url += areaRoutes[section];
            }); 

            _.each(routeData, function(value, key){
                url = url.replace(&#39;:&#39; + key, value);
            });

            return url;
        }
    };
};
routingService.$inject = [require(&#39;providers/routes.js&#39;)];

var serviceName = &#39;AppRoutingService&#39;;
angular.module(&#39;app.services&#39;)
    .service(serviceName, routingService);

module.exports = serviceName;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;So if you were on your inbox page, and needed to link to an announcement with the id of 1, you would call:
&lt;pre class=&#34;prettyprint&#34;&gt;
AppRoutingService.generateUrl(
    &amp;lsquo;announcements.detail&amp;rsquo;,
    { nodeId: &amp;lsquo;CoolAnnouncements&amp;rsquo;, id: 1 }
);
&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id=&#34;refresh-vs-no-refresh-urls:8210323ad8d8da9c9a4161ccd9c52ed2&#34;&gt;Refresh vs. No-Refresh URLs&lt;/h2&gt;

&lt;p&gt;If you have 2 urls that have the same host, Angular will prevent a page refresh when going between them (which is the whole point of a single-page application). Like in the scenario above of going from your inbox to an announcement, we have to somehow tell Angular to not single-page these urls.&lt;/p&gt;

&lt;p&gt;There are 2 solutions I found for this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use target=&amp;rsquo;_self&amp;rsquo; for any URLs that need a page refresh&lt;/li&gt;
&lt;li&gt;Dynamically set the value of the &amp;lt;base&amp;gt; element to include the app name&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Full disclosure, I had already implemented the first one before I thought of the second one so I never actually tried the second one. However, the second solution also makes the assumption that all the urls a particular app start with the same base (i.e. &amp;lsquo;/announcements/&amp;hellip;&amp;rsquo;, &amp;lsquo;/forums/&amp;hellip;&amp;rsquo;, &amp;lsquo;/inbox/&amp;hellip;&amp;rsquo;). For most of our urls this was a safe assumption, but there was actually one app where this WASN&amp;rsquo;T true so I&amp;rsquo;m not sure I would have gone with it anyway.&lt;/p&gt;

&lt;p&gt;The prospect of going through and adding target=&amp;rdquo;_self&amp;rdquo; to all urls that need it sounds awful because&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It&amp;rsquo;s a bunch of really tedious work, both upfront and for maintenance. What would happen if we wanted to suddenly turn the whole site into a single-page app? Gross.&lt;/li&gt;
&lt;li&gt;There are cases where you can&amp;rsquo;t assume anything about which app you are actually in, like with links from the navigation bar and links in re-used view components that appear in different apps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It made sense then to wrap setting the target=&amp;lsquo;self&amp;rsquo; attribute in a directive. I also added a getCurrentArea() function to the routing service that would tell you what app you were in currently, and a getArea() that could tell you the app of a passed url.
&lt;pre class=&#34;prettyprint&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function areaLinkHandler($parse, $timeout, routingService) {
    var link = function(scope, element, attrs) {
        function setHref(elementHref) {
            var elementNode = element[0];
            elementNode.setAttribute(&#39;href&#39;, elementHref);

            if (routingService.getCurrentArea() !== routingService.getArea(elementHref)) {
                elementNode.setAttribute(&#39;target&#39;, &#39;_self&#39;);
            }
        }

        function getHref() {
            var routeValues = !attrs.routeValues ? null : $parse(attrs.routeValues)();
            return routingService.generateUrl(attrs.linkHandlerRoute, routeValues);
        }

        $timeout(function(){
            var elementHref = attrs.linkHandlerRoute ? getHref() : attrs.areaLinkHandler;
            setHref(elementHref);
        }, 0);
    };

    var directive = {
        link: link,
        restrict: &#39;A&#39;,
        scope: true,
        replace: true
    };
    return directive;
}

areaLinkHandler.$inject = [
    &#39;$parse&#39;, 
    &#39;$timeout&#39;, 
    require(&#39;services/routing&#39;)
];

angular.module(&#39;app.directives&#39;)
    .directive(&#39;areaLinkHandler&#39;, areaLinkHandler);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;This actually handles both pre-generated urls:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&amp;lt;a area-link-handler=&#34;coolapp.com/coolurlimade/2&#34;&amp;gt;&amp;lt;/a&amp;gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and generating based off a route and some data
&lt;pre class=&#34;prettyprint&#34;&gt;
&amp;lt;a area-link-handler
    link-handler-route=&amp;ldquo;announcements.detail&amp;rdquo;
    route-data=&amp;ldquo;{ nodeId: &amp;lsquo;CoolAnnouncements&amp;rsquo;, id: 2 }&amp;rdquo;&amp;gt;
&amp;lt;/a&amp;gt;
&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building an Angular App as A Series of Mini-Apps</title>
      <link>http://nathaniscool.com/post/miniappbuilds/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nathaniscool.com/post/miniappbuilds/</guid>
      <description>

&lt;p&gt;I started a new job this year building out an Angular app from scratch.&lt;/p&gt;

&lt;p&gt;For a number of reasons, we decided to make our app a series of single-page apps. So switching between different sections of the site would be a full page reload, but browsing inside the different sections of the site would not require full page reloads.&lt;/p&gt;

&lt;p&gt;However, I still wanted to be able to share directives, services, providers, filters, HTML snippets, etc between all these apps easily without having to do something super annoying. So I decided to build the seperate apps inside of our Gulp build.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the basic folder structure I decided to go with:
&lt;pre class=&#34;prettyprint&#34;&gt;
app/
    /areas
        /userprofile
            /config
                userprofile.module.js
                userprofile.routes.js
            /edit
                userprofile.edit.js
                userprofile.edit.html
    /shared
        /directives
        /filters
        /providers
        /services
        &amp;hellip;etc&amp;hellip;
    /design
        &amp;hellip;. sundry things to make the site pretty (.scss, images, etc)&amp;hellip;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;The basic idea is that each folder under /areas is a seperate app and /shared is, well, stuff that is shared. Each app also has a /config folder that contains a file to instantiate a specific module for the app, and a file to define its routing.&lt;/p&gt;

&lt;p&gt;I set up a basic Gulp.js build process for creating one app just to get something going:
&lt;pre class=&#34;prettyprint&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var sources = {
        js: [&#39;app/**/*.js&#39;],
        partials: [
            &#39;app/areas/**/*.html&#39;,
            &#39;app/shared/**/*.html&#39;,
            &#39;app/layout/**/*.html&#39;,
            &#39;!app/index.html&#39;
        ]
    };
    //move the app scripts to the dev output directory
    gulp.task(&#39;scripts&#39;, function() {
      return gulp.src(sources.js)
            .pipe(gulp.dest(outputs.dev));
    });

    //ngHtml2js takes html files and puts them into Angular&#39;s $templateCache
    gulp.task(&#39;partials&#39;, function() {
        var partialGlob = gulp.src(sources.partials)
            .pipe($.ngHtml2js({ moduleName: &amp;quot;app.templates&amp;quot; }))
            .pipe(gulp.dest(outputs.dev + &#39;/templates&#39;));
    });

    //using a gulp library that reads the Bower dependencies and moves them to a vendor folder
    gulp.task(&#39;bower&#39;, function(){
        return gulp.src(bowerFiles)
            .pipe(jsFilter)
            .pipe(gulp.dest(outputs.dev + &#39;/vendor&#39;))
            .pipe(jsFilter.restore());
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Pretty simple. I then used a Gulp tool called gulp-inject that would gulp.src() the moved files and inject script tags into index.html of the app. To handle dependencies, I basically just used a naming convention and used this array in that gulp.src() call, which preserves the order:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;

    var dependencyJs = [
        outputs.dev + &#39;/areas/**/config/*.js&#39;,
        outputs.dev + &#39;/areas/**/*.js&#39;,
        outputs.dev + &#39;/shared/**/*.module.js&#39;,
        outputs.dev + &#39;/shared/**/*.js&#39;,
        outputs.dev + &#39;/templates/**/*.js&#39;,
        outputs.dev + &#39;/app.init.js&#39;
    ]
&lt;/pre&gt;

&lt;p&gt;So after I added stuff like SASS compilation for our CSS, simple gulp.watch() functions, and stuff to spin up an Express server to serve index.html, that gave me a simple automated build process.&lt;/p&gt;

&lt;h3 id=&#34;part-2-multiple-apps:56bc43ef27feba773a6870745fb51a1e&#34;&gt;Part 2: Multiple Apps!&lt;/h3&gt;

&lt;p&gt;Once I had the project working with one area, it was time to add multiple apps to the build process. To do this I added a simple function that looped through all the targeted build areas.&lt;/p&gt;

&lt;p&gt;This allowed me to re-use my existing build tasks with just having to account for the area name being passed to it.&lt;/p&gt;

&lt;p&gt;So if this is my /areas folder:
&lt;pre class=&#34;prettyprint&#34;&gt;
 /areas
    /directory
    /userprofile
    /forums
 &lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;This would be the function to loop through them, with modified build tasks from above:
&lt;pre class=&#34;prettyprint&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var areas = [&#39;directory&#39;, &#39;userprofile&#39;, &#39;forums&#39;];
    function areaBuilder(taskFn){
        _.each(areas, function(areaName){
            taskFn(areaName);
        });
    }

    var sources: {
        js: function(areaName) {
            return [ &#39;app/&#39; + areaName + &#39;/**/*.js&#39;]
        },
        partials: function(areaName) {
            return [
                &#39;app/areas/&#39; + areaName + &#39;/**/*.html&#39;,
                &#39;app/shared/**/*.html&#39;,
                &#39;app/layout/**/*.html&#39;,
                &#39;!app/index.html&#39;
            ]
        }
    }

    //move the app scripts to the dev output directory
    gulp.task(&#39;scripts&#39;, function() {
        areaBuilder(function(areaName){
            return gulp.src(sources.js(areaName))
                .pipe(gulp.dest(outputs.dev));
        });
    });

    //ngHtml2js takes html files and puts them into Angular&#39;s $templateCache
    gulp.task(&#39;partials&#39;, function() {
        areBuilder(function(areaName){
            var partialGlob = gulp.src(sources.partials(areaName))
                .pipe($.ngHtml2js({ moduleName: &amp;quot;app.templates&amp;quot; }))
                .pipe(gulp.dest(outputs.dev + &#39;/templates&#39;));
        });
    }); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;
I&amp;rsquo;m sure there has to be some npm tool to read folder names that would automate this even more, but adding a new section won&amp;rsquo;t be a super common occurence and doing it this ways gives you a way to &amp;lsquo;hide&amp;rsquo; sections for whatever reasion.&lt;/p&gt;

&lt;p&gt;This approach allowed me to get the project rolling quickly, but there are of couple of things that are less than ideal about it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Apps include a bunch of extra files from the /shared folder that aren&amp;rsquo;t needed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we started to develop various sections of the site, the /shared folder became pretty big. All the files from this folder were basically just dumped into an app regardless of whether that app needed it. I thought through a bunch of different ways to handle this. Most of them involved either setting dependencies inside the gulp build or other really convaluted things.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;This makes concatenation and minification way harder than it needs to be&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I played around with trying to concatenate and minify the scripts a bit, and every solution I came up with just seemed way harder than it needed to be. Tooling files like this quickly become bloated because of stuff like this and I really wanted to avoid that.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Handling file dependencies based off of folder and files names is really terrible in the long run&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Having consistent naming conventions is really important, but using it to build dependencies is super brittle. One derivation from this will cause a bunch of work (and workarounds most likely), causing more bloat.&lt;/p&gt;

&lt;p&gt;Additionally, your actual files and dependencies are completely seperate. The makes it super not apparent what those dependencies are.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;part-3-a-solution:56bc43ef27feba773a6870745fb51a1e&#34;&gt;Part 3: A Solution&lt;/h3&gt;

&lt;p&gt;The solution to this was to start using Browserify, which I knew about but had never actually used. Browserify lets you specify depencies inside of your JS files using Node-style require() statements which makes dependencies very clear and modular, and outputs your code into a single file so concatenation and minification become trivial. It also allowed me to completely take Bower out of the project, which is just one less thing to have to worry about.&lt;/p&gt;

&lt;p&gt;Browserify gulp tasks:
&lt;pre class=&#34;prettyprint&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;scripts&#39;, function() {
    browserifyHelper();
});

gulp.task(&#39;prod-scripts&#39;, function(){
    browserifyHelper(true);
});

function browserifyHelper(prodBuild) {
    areaBuilder(function(areaName){
        var b = browserify({ 
            paths: [&#39;app/&#39;, &#39;node_modules&#39;, &#39;app/shared/&#39;, &#39;app/areas/&#39;],
            fullPaths: true,
            cache: {},
            packageCache: {}
        });

        if (!prodBuild) {
            b = watchify(b);
            b.on(&#39;update&#39;, function(changedFilename){
                bundleHelper(false, b, areaName);
            });        
        }
        b.add(&#39;app/areas/&#39; + areaName + &#39;/init.js&#39;);
        bundleHelper(prodBuild, b, areaName);
    });
}

function bundleHelper(prodBuild, b, areaName){

    if (areaName) {
        return bundle(areaName);
    } else {
        areaBuilder(function(areaName) {
            return bundle(areaName);
        })
    }

    function bundle(areaName) {
        var bundleBlob = b.bundle();

        if (!prodBuild) {
            bundleBlob =  bundleBlob.on(&#39;error&#39;, function(err) {
                return $.notify().write(err);
            });
        }

        bundleBlob = bundleBlob.pipe(source(jsAppFileName))
            .pipe(buffer());

        if (!prodBuild) { 
            bundleBlob = bundleBlob
                .pipe($.sourcemaps.init({ loadMaps: true }))
                .pipe($.sourcemaps.write(&#39;./maps&#39;))
        } else {
            bundleBlob = bundleBlob
                .pipe($.uglify());
        }

        bundleBlob
            .pipe(gulp.dest(areaPath(areaName, prodBuild) + &#39;/js/&#39;))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;
Each app would have an entry point file of init.js which would require() all it&amp;rsquo;s individual pages (who would then define any component/services/etc it needed).&lt;/p&gt;

&lt;p&gt;So if an area had this file structure&amp;hellip;
&lt;pre class=&#34;prettyprint&#34;&gt;
    /forums
        /config
            forums.routes.js
        /list
            forums.list.js
            forums.list.html
        /detail
            forums.detail.js
            forums.detail.html
        forumsContainer.html
        forumsContainer.js
        init.js
&lt;/pre&gt;
&amp;hellip;its init.js would looks like this:&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;prettyprint&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;

var app = require(&#39;app.init.js&#39;);
app(&#39;forums&#39;);

require(&#39;forums/forumsContainer.js&#39;);
require(&#39;forums/list/forums.list.js&#39;);
require(&#39;forums/message/forums.detail.js&#39;);
require(&#39;forums/config/forums.routes.js&#39;);

... other stuff...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;
Notice that {areaName}.module.js not longer exists. Another advantage Browserify gave me was the ability to write instantiating the app&amp;rsquo;s module generically. This allowed sitewide options/behavior and require() statements (stuff like permissions, navigation bar, footer, other stuff that is on every single page) to exist in one place. Here are the basics of app.init.js:&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;prettyprint&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//vendor
var angular = require(&#39;angular&#39;);

function initializeApp(areaName) {
    var moduleBuilder = require(&#39;modulebuilder&#39;);
    angular.module(&#39;communityApp&#39;, [
        &#39;ui.router&#39;,
        &#39;ngSanitize&#39;,
        &#39;community.templates&#39;,
        moduleBuilder(&#39;community.providers&#39;),
        moduleBuilder(&#39;community.services&#39;),
        moduleBuilder(&#39;community.directives&#39;),
        moduleBuilder(&#39;community.filters&#39;),
        moduleBuilder(&#39;community.&#39; + areaName)
    ])    
    .config([&#39;$httpProvider&#39;, function($httpProvider){
        $httpProvider.interceptors.push(require(&#39;services/permissionsLoader.js&#39;));
    }]);

    require(&#39;services/permissionsLoader.js&#39;);

    require(&#39;directives/mainnavbar/mainnavbar.js&#39;);
    require(&#39;directives/breadcrumbs/breadcrumbs.js&#39;);
    require(&#39;directives/discussionsnavbar/discussionsnavbar.js&#39;);
    require(&#39;directives/megamenu/megamenu.js&#39;);
    require(&#39;directives/pageheader/pageheader.js&#39;);
    require(&#39;directives/announcement/announcement.js&#39;);
    require(&#39;directives/pagescroll/pagescroll.js&#39;);
    require(&#39;directives/permissions/permissions.js&#39;);
    require(&#39;directives/error/error.js&#39;);

    require(&#39;basecontroller.js&#39;);

    angular.element(document).ready(function(){
        angular.bootstrap(document, [&#39;communityApp&#39;]);
    });
}

module.exports = initializeApp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;
So, that&amp;rsquo;s the basic idea.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not a perfect solution and I&amp;rsquo;m sure there are things that could be improved. One thing I&amp;rsquo;ve noticed is that looping through the area likes that with Browserify is relatively slow. The looping also breaks the promise&amp;rsquo;y nature of how I&amp;rsquo;ve seen most peoplep write gulp tasks, meaning that I guess it&amp;rsquo;s possible that a task could start prematurely, but I haven&amp;rsquo;t really run into that scenario.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Post 0, Part 2 - Now With Hugo!</title>
      <link>http://nathaniscool.com/post/newandimproved/</link>
      <pubDate>Wed, 02 Mar 2016 13:41:59 -0500</pubDate>
      
      <guid>http://nathaniscool.com/post/newandimproved/</guid>
      <description>&lt;p&gt;&lt;em&gt;whoa&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s been awhile. So much has changed. Previous little projects have broken. I&amp;rsquo;ve seen the errors of the naive Nathan that wrote previous blog posts.&lt;/p&gt;

&lt;p&gt;I always have a noble goal of writing more blog posts, but it never happens. Here&amp;rsquo;s an attempt to fix that I guess. I do have a couple of blog posts about some interesting work I&amp;rsquo;ve done in the last year or so that I&amp;rsquo;m going to try and get out. Stay tuned.&lt;/p&gt;

&lt;p&gt;I switched static site generators to &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; from Wintersmith. Hugo is written in Go rather than being built on top of Node in JavaScript like Wintersmith.&lt;/p&gt;

&lt;p&gt;I think I have these lofty dreams of using a super customizable generator and writing a ton of stuff on my own, but ultimately just lose motivation / get frustrated when I do try to do that. Hugo is unbelievably easy to get started right out of the box. I probably started switching it over about an hour ago and have really enjoyed the out-of-box stuff it provides, like live-reloading. Other site generators I researched could probably be more powerful with tweaking, but Hugo looked like the easiest to get off the ground fastest. The customization process looks pretty painless too. We&amp;rsquo;ll see.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Best Albums of 2014 ... so far</title>
      <link>http://nathaniscool.com/post/cooljamz/</link>
      <pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://nathaniscool.com/post/cooljamz/</guid>
      <description>&lt;p&gt;The first half of 2014 is over. Instead of doing an all-year best-of at the end of the year, here are my favorite albums (and &lt;em&gt;why&lt;/em&gt; they are my favorites) of the past 6 months. In no particular order&amp;hellip;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Metamodern-Sounds-Country-Sturgill-Simpson/dp/B00J8JQ6D4/&#34;&gt;&lt;strong&gt;Metamodern Sounds in Country Music&lt;/strong&gt;&lt;/a&gt; by Sturgill Simpson | &lt;em&gt;Sounds like&lt;/em&gt;: not-stupid country music&lt;/p&gt;

&lt;p&gt;An album for those too cynical to believe country music can rise from its current inanity (lol baby u song ;)). It&amp;rsquo;s got a psychedelic flavor to it, but it&amp;rsquo;s all jangly and twangy and old-school-country &lt;em&gt;good&lt;/em&gt;. So, so good.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should listen to&lt;/em&gt;: Long White Line&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Water-Liars/dp/B00H3TVOMO/&#34;&gt;&lt;strong&gt;Water Liars&lt;/strong&gt;&lt;/a&gt; by Water Liars | &lt;em&gt;Sounds like&lt;/em&gt;: Honesty soaked in fuzzy, southern goodness&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wyoming&lt;/em&gt; was one of my favorites from last year and Water Liars&amp;rsquo; second album in as many years wasn&amp;rsquo;t disappointing. I really like his writing style, and the honest simplicity of their music.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should listen to&lt;/em&gt;: I Want Blood&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Dark-Arc-Saintseneca/dp/B00I1XYF7C/&#34;&gt;&lt;strong&gt;Dark Arc&lt;/strong&gt;&lt;/a&gt; by Saintseneca | &lt;em&gt;Sounds like&lt;/em&gt;: Catchy, folksy tunes with clever, comtemplative lyrics.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d heard of Saintseneca before but nothing from them really stuck until this album. The production on Dark Arc is really, really good. I went back and listened to their earlier stuff, and while it&amp;rsquo;s good, this album feels way more layered and grown up.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should listen to&lt;/em&gt;: Happy Alone&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Sylvan-Esso/dp/B00JBACAF8&#34;&gt;&lt;strong&gt;Sylvan Esso&lt;/strong&gt;&lt;/a&gt; by Sylvan Esso | &lt;em&gt;Sounds like&lt;/em&gt;: Deliciousness&lt;/p&gt;

&lt;p&gt;If you &lt;em&gt;made&lt;/em&gt; me pick a favorite album, this is it. It&amp;rsquo;s &lt;em&gt;unbelievably&lt;/em&gt; good. I&amp;rsquo;m not against electronic music, but it generally is pretty difficult for me to really like it past &amp;ldquo;WOO THIS IS BEEPY AND FUN&amp;rdquo;. This album is both electronic &lt;em&gt;and&lt;/em&gt; earthy which is probably why it is so mesmerizing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should listen to&lt;/em&gt;: Dress&amp;hellip;no, wait&amp;hellip;Hey, Mami&amp;hellip;no, just listen to all of them&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Parish-Lines-Rod-Melancon/dp/B00IJBIQYO&#34;&gt;&lt;strong&gt;Parish Lines&lt;/strong&gt;&lt;/a&gt; by Rod Melancon | &lt;em&gt;Sounds like&lt;/em&gt;: Rootsy, bluesy, twangtastic&amp;rsquo;ness&lt;/p&gt;

&lt;p&gt;An album full of really great songs that tell stories. Maybe I&amp;rsquo;m just cynical that story songs seem to be confined to folk singers, but this album assured me that great songwriters can still &lt;a href=&#34;http://www.urbandictionary.com/define.php?term=throwing%20cheddar&#34;&gt;throw cheddar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should listen to&lt;/em&gt;: Duck Festival Queen&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/PHOX/dp/B00JC8DTB8&#34;&gt;&lt;strong&gt;PHOX&lt;/strong&gt;&lt;/a&gt; by PHOX | &lt;em&gt;Sounds like&lt;/em&gt;: Sassy, smooth dreams&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been waiting a pretty long time for this album. PHOX has had a few singles and YouTube songs floating around, and I&amp;rsquo;ve even (sorta) seen them live twice. But no actual album &amp;hellip; UNTIL NOW. Self-described as &amp;ldquo;nap pop&amp;rdquo;, the production on this album was really, really good and all the songs are done really well. It&amp;rsquo;s a little soulful and smooth, but also a little snappy and poppy &lt;em&gt;all at the same time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should listen to&lt;/em&gt;: Slow Motion&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Range-Light-S-Carey/dp/B00IYWHTRS&#34;&gt;&lt;strong&gt;Range of Light&lt;/strong&gt;&lt;/a&gt; by S. Carey | &lt;em&gt;Sounds like&lt;/em&gt;: A cup of tea by a lake in the fog. Electronic fog.&lt;/p&gt;

&lt;p&gt;While knowing how to pronounce Bon Iver doesn&amp;rsquo;t get you hipster points anymore, knowing Sean Carey is their drummer &lt;em&gt;and&lt;/em&gt; putting him on your favorite albums list probably does. I didn&amp;rsquo;t really like his first album that much, but this one is really good. It&amp;rsquo;s definitely an album for when you&amp;rsquo;re in the mood and have time to &lt;em&gt;really&lt;/em&gt; listen to it. It&amp;rsquo;s layered and atmospheric and intricate.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should listen to&lt;/em&gt;: Neverending Fountain&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are playlists (&lt;a href=&#34;http://open.spotify.com/user/burdell/playlist/4mnonu52XETx2QwP7u1GCz&#34;&gt;Spotify&lt;/a&gt; and &lt;a href=&#34;https://www.rdio.com/people/NathanGriffin89/playlists/8306674/2014-a_JAMS/&#34;&gt;Rdio&lt;/a&gt;) with all the songs &lt;em&gt;plus&lt;/em&gt; a bunch more other songs I&amp;rsquo;ve been listening to so far this year.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FluentCoffee - A Fluent Validator in CoffeeScript</title>
      <link>http://nathaniscool.com/post/fluentcoffee/</link>
      <pubDate>Sun, 27 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://nathaniscool.com/post/fluentcoffee/</guid>
      <description>

&lt;p&gt;I went to a talk on CoffeeScript a few weeks ago and it sorta sparked my interest in it. I&amp;rsquo;d looked at it a long time ago, but hadn&amp;rsquo;t actually done anything with it, so I decided to write something small to try it out.&lt;/p&gt;

&lt;p&gt;The result was &lt;a href=&#34;https://github.com/burdell/FluentCoffee&#34;&gt;FluentCoffee&lt;/a&gt;, a fluent validator. Doing things fluently just means you chain together calls to functions which accomplishes what you&amp;rsquo;re trying to do.&lt;/p&gt;

&lt;h3 id=&#34;basic-validation:469679c4f97c488a9b9f959f11ebb939&#34;&gt;Basic Validation&lt;/h3&gt;

&lt;p&gt;Everything hinges off these basic validation functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GreaterThan&lt;/li&gt;
&lt;li&gt;LessThan&lt;/li&gt;
&lt;li&gt;Between&lt;/li&gt;
&lt;li&gt;EqualTo&lt;/li&gt;
&lt;li&gt;Contains&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also &lt;em&gt;Length()&lt;/em&gt; and &lt;em&gt;Not()&lt;/em&gt; that can be used (where it makes sense).&lt;/p&gt;

&lt;p&gt;So for primitive values (strings, numbers, arrays, booleans, etc) you validate them this way:
&lt;pre class=&#34;prettyprint&#34;&gt;
    primitiveValidation = new Validator()
        .For [1, 2, 3, 4, 6], &amp;ldquo;number array&amp;rdquo;
            .Contains 2
            .Not().Contains(5)
        .For &amp;ldquo;how now brown cow&amp;rdquo;, &amp;ldquo;stupid saying&amp;rdquo;
            .Length().GreaterThan 10
        .For 3 * 10, &amp;ldquo;calculation&amp;rdquo;
            .LessThan 340
            .Between 250, 275
        .For 40 &amp;lt; 50
            .EqualTo true
    .Assert()
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;The first parameter is the value, the second is the &lt;em&gt;name&lt;/em&gt; of the value. The second parameter is optional, defaulting to &amp;ldquo;Value&amp;rdquo; if you don&amp;rsquo;t include it.&lt;/p&gt;

&lt;p&gt;This returns an object with a boolean &lt;em&gt;valid&lt;/em&gt; attribute, and list of object that contain the error message and the name of offending value. The above validation would return this:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
    {
        valid: false,
        errors: [
            {
                value: &#34;calculation&#34;,
                message: &#34;calculation must be between 250 and 275&#34;
            }
        ]
    }
&lt;/pre&gt;

&lt;h3 id=&#34;object-validations:469679c4f97c488a9b9f959f11ebb939&#34;&gt;Object Validations&lt;/h3&gt;

&lt;p&gt;Object validation has all the same validations, but you just tell it which attribute to validate when you call &lt;em&gt;.For()&lt;/em&gt; on it. You have to qualify whether an attribute is required (&lt;em&gt;Require()&lt;/em&gt;) or optional (&lt;em&gt;Optional()&lt;/em&gt;). If an attribute is required, the validator will check its existance and add an error if it is not there.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
    objMe = 
        name: &#34;Nathan Griffin&#34;,
        age: 82,
        numberOfAppendages: 20,
        faveCereal: &#34;Honey Bunches of Oats&#34;,
        job: &#34;Code Ninja&#34;,
        phoneOpSystem: &#34;Android&#34;

    validation = new Validator()
        .For objMe
            .Require &#34;age&#34;
                .LessThan 30
                .Not().EqualTo 29
            .Require &#34;numberOfAppendages&#34;
                .Between 15, 25
            .Require &#34;name&#34;
                .EqualTo &#34;Nathan Griffin&#34;
            .Require &#34;phoneOpSystem&#34;
            .Require &#34;job&#34;
                .Contains &#34;Ninja&#34;
                .Length().GreaterThan 5
            .Optional &#34;nickname&#34;
                .Not().Contains &#34;Dawg&#34; 
        .Assert()
&lt;/pre&gt;

&lt;h3 id=&#34;function-validation:469679c4f97c488a9b9f959f11ebb939&#34;&gt;Function Validation&lt;/h3&gt;

&lt;p&gt;For function validation you just call &lt;em&gt;WithParameters()&lt;/em&gt; to evaluate the result as one of the previously mentioned validation types (or even one or more function validations if you&amp;rsquo;re feeling sassy)&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;prettyprint&#34;&gt;
    objMe =
        name: &amp;ldquo;Nathan Griffin&amp;rdquo;,
        job: &amp;ldquo;Code Ninja&amp;rdquo;,
        address: &amp;ldquo;1234 Sesame St Atlanta GA 30305&amp;rdquo;,
        favoriteCereal: &amp;ldquo;Honey Bunches of Oats&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    objBurdell =
        name: &amp;quot;George P. Burdell&amp;quot;,
        job: &amp;quot;trollol&amp;quot;,
        age: 87,
        favoriteCereal: &amp;quot;Fruit Loops&amp;quot;

    identityFunction = (isMe) -&amp;gt;
        if isMe then objMe else objBurdell

    functionValidation = new Validator()
        .For identityFunction
            .WithParameters true
                .Require &amp;quot;name&amp;quot;
                    .EqualTo &amp;quot;Nathan Griffin&amp;quot;
                .Require &amp;quot;job&amp;quot;
                    .Contains &amp;quot;Ninja&amp;quot;
            .WithParameters()
                .Require &amp;quot;name&amp;quot;
                    .EqualTo &amp;quot;George P. Burdell&amp;quot;
                .Require &amp;quot;job&amp;quot;
                    .Contains &amp;quot;troll&amp;quot;
                .Require &amp;quot;age&amp;quot;
                    .GreaterThan 50
                    .LessThan 90
        .Assert()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;
Not sure if it&amp;rsquo;s obvious, but you can chain all these together. Look at &lt;a href=&#34;https://github.com/burdell/FluentCoffee/blob/master/coffeeTester.coffee&#34;&gt;coffeeTester.coffee&lt;/a&gt; to see that.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s basically it. I&amp;rsquo;m sure there&amp;rsquo;s weird stuff / bugs if you try to be stupid with it, so be warned.&lt;/p&gt;

&lt;p&gt;One thing that&amp;rsquo;d be cool that it currently doesn&amp;rsquo;t do would be to &amp;ldquo;cache&amp;rdquo; the validation so that I could validate all the steps at one point, do something else, then run the validation again without having to re-state the validations. This would also probably mean that the validations wouldn&amp;rsquo;t actually be evaluated until you called &lt;em&gt;Assert()&lt;/em&gt;, which I could see having some value. I almost started to refactor it to do that, but got kinda meh about it since there&amp;rsquo;s something else I want to start.&lt;/p&gt;

&lt;p&gt;Some quick thoughts on CoffeeScript&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;hi-h8rs-coffeescript:469679c4f97c488a9b9f959f11ebb939&#34;&gt;&amp;ldquo;hi h8rs&amp;rdquo; - CoffeeScript&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“There are three things I have learned never to discuss with people&amp;hellip; Religion, Politics, and CoffeeScript.”&lt;/em&gt;
― Charles M. Schulz, mostly&lt;/p&gt;

&lt;p&gt;In the world of JavaScript, CoffeeScript gets a bunch of hate. It seems most people fall into either the camp of &amp;ldquo;&lt;em&gt;WOW I LOVE THIS&lt;/em&gt;&amp;rdquo; or &amp;ldquo;&lt;em&gt;THIS IS VILE JIVE&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Most people probably dislike CoffeeScript for the same reason people dislike a bunch of things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s unfamiliar&lt;/li&gt;
&lt;li&gt;It changes the way they&amp;rsquo;ve done stuff&lt;/li&gt;
&lt;li&gt;They misunderstand what it&amp;rsquo;s trying to do&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think CoffeeScript really should be though of more like a &lt;em&gt;tool&lt;/em&gt; rather than a &lt;em&gt;language&lt;/em&gt;. Just like an IDE or a fancy text editor or a linter, CoffeeScript is simply a tool employed to write JavaScript. Yes, it&amp;rsquo;s an abstraction and therefore an intrinsically more complicated way to write it, but at the end of the day you&amp;rsquo;re generating JavaScript. Tools and support for CoffeeScript were (apparently) lacking in the past, but that&amp;rsquo;s just not a valid argument against it anymore. I had zero issues with getting it up and running with Sublime Text on OS X within minutes. And I&amp;rsquo;m sure there are even more tools out there that I didn&amp;rsquo;t take advantage of.&lt;/p&gt;

&lt;p&gt;I used to have the commonly held position of &lt;em&gt;&amp;ldquo;It&amp;rsquo;s better to just learn to write GOOD JavaScript&amp;rdquo;&lt;/em&gt;, but trying to write anything non-trivial in CoffeeScript actually requires a pretty in-depth understanding of JavaScript. If you don&amp;rsquo;t have a pretty firm grasp of JavaScript, your CoffeeScript is just going to either end up being terrible CoffeeScript instead of terrible JavaScript, or full of weird JavaScript-y CoffeeScript workarounds.&lt;/p&gt;

&lt;p&gt;I actually found CoffeeScript to be pretty enjoyable to use. It was simple, yet expressive and did a good job of getting out of your way. No clunky anonymous function declarations, built in null checking (really, this feature alone might be worth it), expressive 1-line conditionals, super easy handling of arbitrary parameter lengths, etc. The list goes on.&lt;/p&gt;

&lt;h3 id=&#34;but-would-i-want-to-switch-to-coffeescript-permanently:469679c4f97c488a9b9f959f11ebb939&#34;&gt;&amp;hellip;but would I want to switch to CoffeeScript permanently?&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;d probably be interested in doing more stuff in CoffeeScript, but I&amp;rsquo;m not sure I&amp;rsquo;m ready to slip into robes of a CoffeeScript evangelist quite yet. If I was part of team where everybody really bought into the idea, I don&amp;rsquo;t think I would hate that. A big part of that is it would be much, much easier to have a syntatically homogenous codebase in CoffeeScript.&lt;/p&gt;

&lt;p&gt;Like I mentioned earlier, the endgame of CoffeeScript is still JavaScript. I didn&amp;rsquo;t like having the extra step when debugging what I was writing. Luckily, FluentCoffee ended up only being ~120 lines of code, so I pretty much knew where errors were happening. On a much larger codebase I&amp;rsquo;m sure that quickly becomes an issue. Yes, I know sourcemaps exist for this. Which leads to my next point&amp;hellip;&lt;/p&gt;

&lt;p&gt;Syntactically the learning curve to CoffeeScript is really nice. But I think the point at which you could truly write it more efficiently than JavaScript takes some investment with the extra tooling needed and the built-in complexity that the Coffeescript -&amp;gt; JavaScript process brings. Maybe it doesn&amp;rsquo;t, but there were times even writing something as relatively simple as FluentCoffee that I was scratching my head a little. Having team members that are invested in really understanding CoffeeScript and tools for it would also really help with this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>$parse - Power to the Directive</title>
      <link>http://nathaniscool.com/post/parsepower/</link>
      <pubDate>Fri, 17 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://nathaniscool.com/post/parsepower/</guid>
      <description>

&lt;p&gt;I mentioned in a &lt;a href=&#34;http://nathaniscool.com/articles/angularjs/&#34;&gt;previous post&lt;/a&gt; about switching from using Backbone.js to Angular.js for front-end development at work. One of the goals of that switch was to basically allow a developer to create a page using just semantic markup and have 90% or more of the front-end functionality completed.&lt;/p&gt;

&lt;p&gt;Anybody familiar with Angular knows exactly how to accomplish this: &lt;em&gt;directives&lt;/em&gt;. Angular gives you a ton of directives out of the box. Stuff like showing elements, hiding elements, disabling elements, looping, conditionals, .etc all come for free and can be dropped right into your HTML. Boom.&lt;/p&gt;

&lt;p&gt;Anybody who has attempted to write their own at some point wonders: How does Angular make them so powerful? Why can&amp;rsquo;t I have &lt;em&gt;nice&lt;/em&gt; things?&lt;/p&gt;

&lt;h3 id=&#34;a-solution:d93e9551ad2903f938fcd5f2eeb76d70&#34;&gt;A Solution&lt;/h3&gt;

&lt;p&gt;One of the coolest and most &amp;ldquo;magical&amp;rdquo; parts that people first notice with Angular is the ability to pass in actual JavaScript expressions straight from the DOM. I was really curious as to how exactly Angular handles this so well. Angular &lt;em&gt;feels&lt;/em&gt; magical sometimes, but at the end of the day it&amp;rsquo;s just JavaScript. So I went to the source code, and &lt;a href=&#34;https://github.com/angular/angular.js/blob/master/src/ng/parse.js&#34;&gt;AHA&lt;/a&gt;! They&amp;rsquo;ve written their own parsing engine.&lt;/p&gt;

&lt;p&gt;And it turns out &lt;em&gt;you too&lt;/em&gt; can parse stringed expressions by injecting their &lt;a href=&#34;http://docs.angularjs.org/api/ng.$parse&#34;&gt;$parse&lt;/a&gt; service where you need it. This had a profound impact when trying to write directives that could be 1) re-used and 2) entirely defined through markup.&lt;/p&gt;

&lt;h3 id=&#34;simple-examples:d93e9551ad2903f938fcd5f2eeb76d70&#34;&gt;Simple Examples&lt;/h3&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/5SFj7/5/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;ok-so:d93e9551ad2903f938fcd5f2eeb76d70&#34;&gt;Ok, so &amp;hellip; ?&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;ve written directives you&amp;rsquo;re probably well aware that HTML attributes passed into directive are just strings. Boring strings. What about complex objects? What about functions?&lt;/p&gt;

&lt;p&gt;The simplest solution to this (and the one I went to first) is &lt;em&gt;&amp;ldquo;SCOPE!&amp;rdquo;&lt;/em&gt;. The directive and controller share this magical little object called scope. Anything I chunk in scope in the controller, I have access to in scope in the directive. So if I need a object / function / value in the directive, it&amp;rsquo;s super easy to just pass the directive the &lt;em&gt;name&lt;/em&gt; of it, and boom, access.&lt;/p&gt;

&lt;p&gt;But remember, our goal for Angular was to have a developer come in and drop HTML declarations like they&amp;rsquo;re hot and be done with it. If I have to go to the controller and set up a bunch of stuff every time I have to use that directive, the glimmer of semantic markup is dulled. I&amp;rsquo;m all for following MVC and separating out concerns between the view and controller, but this feels really restrictive and unnecessary.&lt;/p&gt;

&lt;h3 id=&#34;rethinking-the-approach:d93e9551ad2903f938fcd5f2eeb76d70&#34;&gt;Rethinking the Approach&lt;/h3&gt;

&lt;p&gt;We had a need for a line-item directive for some upcoming functionality we were going to do, and had our own line-item jQuery plugin that worked pretty well, so the directive for this was just going to be a wrapper around that which took all the meta-data from markup and translated it into the options object for the plugin. Kinda like this:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
    &amp;lt;items ng-model=&#39;model.LineItemList&#39; default-length=&#39;5&#39;&amp;gt;
        &amp;lt;column field=&#39;Name&#39;&amp;gt;&amp;lt;/column&amp;gt;
        &amp;lt;column field=&#39;TotalOrdered&#39;&amp;gt;&amp;lt;/column&amp;gt;
        &amp;lt;column field=&#39;Cost&#39;&amp;gt;&amp;lt;/column&amp;gt;
        &amp;lt;column field=&#39;TotalPrice&#39;&amp;gt;&amp;lt;/column&amp;gt;
    &amp;lt;/items&amp;gt;
&lt;/pre&gt;

&lt;p&gt;The plugin takes a list of column objects, and we could set up set up a multiplication calculation inside of there.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
    columns = [
        { field: &#39;Name&#39; },
        { field: &#39;TotalOrdered&#39; }
        { field: &#39;Cost&#39; }
        { 
            field: &#39;TotalPrice&#39;, 
            calculation: 
            { 
                operator: &#39;*&#39;, 
                baseField: &#39;TotalOrdered&#39;, 
                multiplier: &#39;Cost&#39; 
            } 
        }
    ];
&lt;/pre&gt;

&lt;p&gt;With $parse we could just pass in that same object into the directive as a string. Like this:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
    &amp;lt;column 
        field=&#39;TotalPrice&#39; 
        calculation=&#39;{ operator=&#34;*&#34;, baseField=&#34;TotalOrdered&#34; multiplier=&#34;Cost&#34;}&#39;&amp;gt;
    &amp;lt;/column&amp;gt;
&lt;/pre&gt;

&lt;p&gt;But does this make life easier? Yes, it works, but it&amp;rsquo;s weird, clunky, and just feels difficult.&lt;/p&gt;

&lt;p&gt;And we were definitely going to need addition and subtraction. What if we need 4 numbers? And what if we need something like &amp;ldquo;TotalOrdered * TotalCost / (TotalCost * 3.14)&amp;ldquo;? If you&amp;rsquo;re sneaky, you&amp;rsquo;re probably already suspecting that the plugin would hold an object of functions keyed by the &amp;lsquo;operator&amp;rsquo; attribute, which means every different calculation requires a developer to go in and manually write the logic for that calculation.&lt;/p&gt;

&lt;p&gt;This would be so much easier:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
    &amp;lt;column field=&#39;TotalPrice&#39; calculation=&#39;TotalOrdered * TotalCost&#39;&amp;gt;&amp;lt;/column&amp;gt;
&lt;/pre&gt;

&lt;p&gt;And with $parse this is &lt;em&gt;incredibly&lt;/em&gt; easy.&lt;/p&gt;

&lt;p&gt;I wrote a simple calculator directive to show the idea behind doing this. The calculator is declared like this:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
    &amp;lt;calculator 
        values=&#34;{ pi: 3.14, r: 12, e:.66789 }&#34; 
        calculations=&#34;pi * r * r, e * r&#34; &amp;gt;
    &amp;lt;/calculator&amp;gt;
&lt;/pre&gt;

&lt;p&gt;The idea is that any time you need to do a calculation, pass the data into a function and call $parse. In our line-item directive, we pass a function into the plugin so that the jQuery doesn&amp;rsquo;t need to mix with Angular, and the plugin uses that function and passes it whichever row of data is needed.&lt;/p&gt;

&lt;p&gt;This calculator is slightly simpler in that the data is just one object ($scope.fieldValues) instead of multiple rows of objects, and I loop through all the calculations ($scope.calculations) and calculate the values.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
    $scope.$watch(&#34;fieldValues&#34;, function(){
            var fieldValueNumbers = $scope.getFieldValueNumbers();
            _.each($scope.calculations, function(calc) {
                calc.value = $scope.calculate(calc.string, fieldValueNumbers);
            });
        }, true);

    $scope.calculate = function(calculationString, values){
            try {
                var value = $parse(calculationString)(values);
                return (_.isFinite(value) ? value : 0);
            } catch (e) {
                return &#34;Invalid expression :(&#34;
            }
        };
&lt;/pre&gt;

&lt;p&gt;(If you&amp;rsquo;re wondering, _.each and _.isFinite are from &lt;a href=&#34;http://underscorejs.org/&#34;&gt;Underscore&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The full working example:
&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/GRKDQ/2/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;The GitHub repo for it is &lt;a href=&#34;https://github.com/burdell/AngularCalculator&#34;&gt;here&lt;/a&gt; if you want it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ListenFirst - Angular.js &amp; Last.fm</title>
      <link>http://nathaniscool.com/post/angularjs/</link>
      <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nathaniscool.com/post/angularjs/</guid>
      <description>

&lt;p&gt;We recently started using &lt;a href=&#34;http://angularjs.org/&#34;&gt;Angular.js&lt;/a&gt; at work for front-end development after using &lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone.js&lt;/a&gt; for a little over a year. While we were still deciding on whether to to use it or not I wrote a &lt;a target=&#34;_blank&#34; href=&#34;http://www.nathaniscool.com/ListenFirst&#34;&gt;small app&lt;/a&gt; to play around with Angular that uses the Last.fm API and tells you the first time you listened to an artist, the last time you&amp;rsquo;ve listened, and how many times you&amp;rsquo;ve listened to them. (If you don&amp;rsquo;t have a Last.fm account, mine is &amp;lsquo;burdell&amp;rsquo;. Have fun.)&lt;/p&gt;

&lt;p&gt;So next time you&amp;rsquo;re with your friends and they ask &amp;ldquo;Hey, have you heard of this band?&amp;rdquo;. You&amp;rsquo;re response will be &lt;a href=&#34;http://bitchinlifestyle.tv/wp-content/uploads/2013/03/homens-e1347382625816.jpg&#34;&gt;&amp;ldquo;Uh, yeah. I&amp;rsquo;ve listened to them since January 9, 2008&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s sometimes some weird issues with the API sometimes, but not sure if I&amp;rsquo;m going to go back and make it more robust or not. I&amp;rsquo;ve thought about doing something with &lt;a href=&#34;http://d3js.org/&#34;&gt;D3&lt;/a&gt; and listening data, but not sure what I&amp;rsquo;d do. So maybe I&amp;rsquo;ll revist it in the future.&lt;/p&gt;

&lt;p&gt;Quick thoughts&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;backbone-vs-angular-library-vs-framework:5b7fafe42028dd2aed8d53d7e5079e12&#34;&gt;Backbone vs. Angular :: Library vs. Framework&lt;/h3&gt;

&lt;p&gt;Backbone is more library-like. It gives you some (really good) tools and lets you do what you want with them. Angular is more of a framework. It gives you more of a system and puts more restrictions on how you work.&lt;/p&gt;

&lt;p&gt;Both approaches have their advantages, but what ultimately led to switching at work was the leverage provided by Angular&amp;rsquo;s built in stuff, especially the programatic templating in Angular. Backbone views quickly become &lt;em&gt;monstrous&lt;/em&gt; with all the event handlers and having to program interaction away from the actual DOM.&lt;/p&gt;

&lt;h3 id=&#34;directives-services-factories-oh-my:5b7fafe42028dd2aed8d53d7e5079e12&#34;&gt;Directives? Services? Factories? OH MY!&lt;/h3&gt;

&lt;p&gt;Backbone felt a bunch like OO sometimes with the ability to extend models/views/collections, which I really liked. It was really easy to &amp;ldquo;get&amp;rdquo; what it was doing. Angular at first felt like a bunch of disconnected pieces. Once you figured out how these pieces fit together, it made sense and was awesome, but the learning curve to figuring that out was more than with Backbone.&lt;/p&gt;

&lt;h3 id=&#34;last-fm:5b7fafe42028dd2aed8d53d7e5079e12&#34;&gt;Last.fm&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve thought about building this for awhile and I&amp;rsquo;ve used Last.fm since 2006 or so (although I reset my listening history in 2008 :(&amp;lsquo;. The API was pretty easy to use. There were some quirks, but overall I approved. Like I said, I think using D3 to do some kind of visualization would be pretty awesome, but not sure what I&amp;rsquo;d do with it just yet.&lt;/p&gt;

&lt;h3 id=&#34;backbone-angular-why:5b7fafe42028dd2aed8d53d7e5079e12&#34;&gt;Backbone? Angular? Why?&lt;/h3&gt;

&lt;p&gt;Backbone and Angular bring MVC-like structure to the front end of your web applications. MVC is a common software architecture pattern in which you seperate out your application into 3 parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Model: the underlying data in your application&lt;/li&gt;
&lt;li&gt;View: the presentation of your data&lt;/li&gt;
&lt;li&gt;Controller: the &amp;ldquo;business logic&amp;rdquo; of how your data gets transformed&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a tradition web application, models are whatever database you&amp;rsquo;ve chosen, views are your HTML/CSS/JavaScript, and the controller is whatever server-side framework you&amp;rsquo;ve chosen (Rails, Django, Node, .Net MVC, etc).&lt;/p&gt;

&lt;p&gt;JavaScript frameworks live entirely in the &lt;strong&gt;V&lt;/strong&gt; in MVC, and split that up into its own little MVC-like playground. The advantages for doing this quickly become apparent when trying to do anything more than basic interaction on a web page. HTML/CSS is all about presentation, not the data it&amp;rsquo;s presenting. By adding structure and splitting up concerns, interaction becomes much easier and has given way to the immersive &lt;a href=&#34;http://en.wikipedia.org/wiki/Single-page_application&#34;&gt;single page webapps&lt;/a&gt; of today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Post 0 - Now with Wintersmith!</title>
      <link>http://nathaniscool.com/post/post0/</link>
      <pubDate>Tue, 17 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nathaniscool.com/post/post0/</guid>
      <description>

&lt;p&gt;Officially moved nathaniscool.com to using a new static site generator called &lt;a href=&#34;http://www.wintersmith.io&#34;&gt;Wintersmith&lt;/a&gt; and hosting through GitHub pages. It was really easy to get Wintersmith up and running and it runs on Node which I&amp;rsquo;ve kinda been interested in for while. Annnd it means I can use Handlebars and Underscore, both at which I&amp;rsquo;ve used for awhile and really, really like.&lt;/p&gt;

&lt;h3 id=&#34;what-is-a-static-site-generator:ebf694c4335b0c8ae3160edb3b0d51a9&#34;&gt;&amp;hellip; what is a &amp;ldquo;static site generator&amp;rdquo;?&lt;/h3&gt;

&lt;p&gt;A static site generator takes a bunch of files on a computer, works some magic, and spits out a full site written in only HTML, CSS, and JavaScript (the love languages of the browser).&lt;/p&gt;

&lt;h3 id=&#34;but-why:ebf694c4335b0c8ae3160edb3b0d51a9&#34;&gt;But, why?&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;It&amp;rsquo;s cool&lt;/li&gt;
&lt;li&gt;Since the entire site is HTML, CSS, and JavaScript, the options for hosting it increase exponentially and moving hosting solutions is super, super easy. If I wanted to move to something like Amazon S3, or even set up my own server, all I have to do is move the files.&lt;/li&gt;
&lt;li&gt;You can&amp;rsquo;t &lt;a href=&#34;http://cdn-www.i-am-bored.com/media/95505_rushack2.jpg&#34;&gt;hax0r&lt;/a&gt; HTML. There&amp;rsquo;s no login to an account to make a post, and no database connection to retrieve the content from.&lt;/li&gt;
&lt;li&gt;It allows you to really seperate out different parts of your site when you&amp;rsquo;re building it. For example, the sidebar, header, and main content panel of this site are all in seperate files. If I needed to make a change to one of those, it&amp;rsquo;s super easy to find it and make changes that then apply to every page that uses those sections. Every post is a seperate markdown file and contains meta-data about that post. But then you just run a command line a tool and build everything, and boom, you&amp;rsquo;ve got a site.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s cool&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;why-wintersmith:ebf694c4335b0c8ae3160edb3b0d51a9&#34;&gt;Why Wintersmith?&lt;/h3&gt;

&lt;p&gt;I looked at &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; and actually made a site with &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;, which is written on top of Jekyll. Octopress is probably the most widely used static site generator, so it has a bunch of really cool themes that people have written for it. But 1. My Ruby chops are minimal and 2. it felt really hard to understand how stuff was put together.&lt;/p&gt;

&lt;p&gt;When I started using Wintersmith, I felt like it just got out of my way and it made a bunch of sense in how you set up and get everything up and running.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s cool.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>